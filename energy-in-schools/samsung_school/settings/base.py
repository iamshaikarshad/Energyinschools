"""
Django settings for samsung_school project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import datetime, timedelta, date
from enum import Enum
from pathlib import Path

from configurations import Configuration
from corsheaders.defaults import default_headers

ROOT_URL = f'{os.environ.get("DOMAIN", "http://localhost:8000")}/'
PROJECT_ROOT = str(Path(__file__).parent.parent.parent)
AZURE_MEDIA_URL = 'https://energyinschools.blob.core.windows.net/energy-in-schools-media'


class ConfigurationName(Enum):
    LOCAL = 'local'
    STAGING = 'staging'
    PRODUCTION = 'production'
    DOCKER = 'docker'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/


class Base(Configuration):
    DEBUG = True

    TEST_MODE = True  # testing mode for allowing testing schools

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'o7a9l0z(%%3vaox0%_4fdw!@*)$@d&=iv#wi2i(adp@trkb2=4'
    FIELD_ENCRYPTION_KEY = b'Exb+KmLIhJcnb/xH12d4g0Ueqw/BHg9vqbMPRvDBPOE='
    OPEN_WEATHER_MAP_API_KEY = '0868a2631b41f64f9b68f4928df3511c'

    # SECURITY WARNING: don't run with debug turned on in production!

    # Application definition

    INSTALLED_APPS = [
        # third party apps
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rest_framework',
        'rest_framework_simplejwt.token_blacklist',
        'drf_yasg',
        'corsheaders',
        'encrypted_model_fields',
        'taggit',
        'taggit_serializer',
        'secretballot',
        'private_storage',
        'storages',
        'tinymce',
        'martor',
        'django_cleanup.apps.CleanupConfig',
        'safedelete',

        # own apps
        'apps.accounts',
        'apps.addresses',
        'apps.auth_token',
        'apps.blacklisted_emails',
        'apps.carbon_intensity',
        'apps.cashback',
        'apps.dashboard_app_files',
        'apps.energy_dashboard',
        'apps.energy_meters',
        'apps.energy_meters_billing_info',
        'apps.energy_providers',
        'apps.energy_tariffs',
        'apps.facts',
        'apps.forum',
        'apps.historical_data',
        'apps.hubs',
        'apps.learning_days',
        'apps.lesson_plans',
        'apps.locations',
        'apps.main',
        'apps.manuals',
        'apps.microbit_devices',
        'apps.microbit_historical_data',
        'apps.microbit_variables',
        'apps.microbit_weather',
        'apps.mug_service',
        'apps.notifications',
        'apps.registration_requests',
        'apps.resources',
        'apps.schools_metrics',
        'apps.smart_things_apps',
        'apps.smart_things_c2c',
        'apps.smart_things_devices',
        'apps.smart_things_sensors',
        'apps.smart_things_web_hooks',
        'apps.themes',
        'apps.weather',

        'aldjemy'  # it have to be the last in list
    ]

    MIDDLEWARE = [
        'django.middleware.gzip.GZipMiddleware',
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'corsheaders.middleware.CorsMiddleware',
        'secretballot.middleware.SecretBallotIpUseragentMiddleware',
        # 'django.middleware.clickjacking.XFrameOptionsMiddleware', XXX TODO for iframe to dashboard
    ]

    ROOT_URLCONF = 'samsung_school.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'django.server': {
                '()': 'django.utils.log.ServerFormatter',
                'format': '[%(server_time)s] %(message)s',
            },
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
            },
            'simple': {
                'format': '%(levelname)s %(message)s'
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            'django.server': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'django.server',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'propagate': True,
            },
            'django.server': {
                'handlers': ['django.server'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.request': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'INFO'
            },
            '': {
                'handlers': ['console'],
                'level': 'INFO'
            }
        }
    }

    WSGI_APPLICATION = 'samsung_school.wsgi.application'

    # Password validation
    # https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.ModelBackend',
        'apps.auth_token.auth_backends.DashboardAuthBackend'
    ]

    REST_FRAMEWORK = {
        'DEFAULT_FILTER_BACKENDS': (
            'apps.main.filter_backends.EnumSupportedFilterBackend',
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
            'samsung_school.permissions.ModelPermissions',
        ),
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework_simplejwt.authentication.JWTAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ),
        'DEFAULT_RENDERER_CLASSES': (
            'rest_framework.renderers.JSONRenderer',
            'rest_framework.renderers.BrowsableAPIRenderer',
            'rest_framework_csv.renderers.CSVRenderer',
        ),
    }

    # Internationalization
    # https://docs.djangoproject.com/en/2.0/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/2.0/howto/static-files/

    STATIC_URL = '/static/'
    STATIC_ROOT = './static'

    MEDIA_URL = '/'

    AUTH_USER_MODEL = 'accounts.User'

    INVITE_EXPIRATION_TIME = timedelta(days=7)

    EMAIL_BACKEND_DUMMY = 'django.core.mail.backends.dummy.EmailBackend'
    EMAIL_BACKEND_CONSOLE = 'django.core.mail.backends.console.EmailBackend'

    EMAIL_BACKEND = EMAIL_BACKEND_DUMMY

    CORS_ORIGIN_ALLOW_ALL = True
    CORS_EXPOSE_HEADERS = [
        'Content-Disposition'
    ]

    # Setup support for proxy headers
    USE_X_FORWARDED_HOST = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    SWAGGER_SETTINGS = {
        'SECURITY_DEFINITIONS': {
            'Bearer': {
                'type': 'apiKey',
                'name': 'Authorization',
                'in': 'header'
            },
            'School ID': {
                'type': 'apiKey',
                'name': 'school-id',
                'in': 'header'
            },
            'Raspberry Pi ID': {
                'type': 'apiKey',
                'name': 'pi-id',
                'in': 'header'
            },
        },
        'DOC_EXPANSION': 'none',
        'PERSIST_AUTH': True,
    }

    ADMIN_USERNAME = 'admin'
    DAILY_REPORT_EMAIL_SUBJECT = 'EnergyInSchools Daily Report ({})'
    DAILY_REPORT_EMAIL_TITLE = 'Schools status daily report ({}) ({})'
    NOTIFICATION_SENDING_EMAIL = 'no-reply@energyinschools.co.uk'
    RASPBERRY_PI_AUTH_CACHE_TIME = timedelta(seconds=30)

    class LINKS:
        UNSUBSCRIBE = f'{ROOT_URL}ban-email/'
        RESET_PASSWORD = f'{ROOT_URL}reset-password/'

        ALL_REQUESTS = f'{ROOT_URL}admin/schools'
        CHECK_REGISTRATION_REQUEST_STATUS = f'{ROOT_URL}registration-request-status/?token={{token}}'
        SUBMIT_QUESTIONNAIRE = f'{ROOT_URL}registration-request-questionnaire/?token={{token}}'
        END_TRAINING_PERIOD = f'{ROOT_URL}end-training-session/?token={{token}}'

    LESSON_PLANS_STORAGE_FOLDER = 'lesson-plans'
    LESSON_AVATARS_FOLDER = 'lesson-avatars'
    LESSON_GROUP_AVATARS_FOLDER = 'lesson-group-avatars'
    LESSON_GROUP_MATERIALS_FOLDER = 'lesson-group-plans'
    SINGED_LOA_STORAGE_FOLDER = 'signed-loa'
    MANUALS_STORAGE_FOLDER = 'manuals'
    MANUALS_AVATARS_STORAGE_FOLDER = 'avatars'

    CELERY_BROKER_URL = f"redis://{os.environ.get('REDIS_URL', 'localhost:6379')}/0"
    CELERY_RESULT_BACKEND = f"redis://{os.environ.get('REDIS_URL', 'localhost:6379')}/0"

    CACHEOPS_REDIS = f"redis://{os.environ.get('REDIS_URL', 'localhost:6379')}/1"
    CACHEOPS_DEGRADE_ON_FAILURE = True  # when Redis is unavailable, turn off caching

    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    AWS_STORAGE_BUCKET_NAME = 'energy-in-schools-media-bucket'
    AWS_QUERYSTRING_AUTH = False

    MQTT_CERTIFICATES_FOLDER = f'{PROJECT_ROOT}/tmp/'

    TINYMCE_DEFAULT_CONFIG = {
        'theme': 'advanced',
        'width': '50%',
        'height': 300,
        'plugins': 'lists',
        'theme_advanced_toolbar_location': 'top',
        'theme_advanced_buttons1': 'numlist,bullist,indent,outdent',
        'theme_advanced_toolbar_align': 'center',
    }

    CORS_ALLOW_HEADERS = default_headers + (
        'cache-control',
    )

    # Markdown extensions (default)
    MARTOR_MARKDOWN_EXTENSIONS = [
        'markdown.extensions.extra',
        'markdown.extensions.nl2br',
        'markdown.extensions.smarty',
        'markdown.extensions.fenced_code',

        # Custom markdown extensions.
        'martor.extensions.urlize',
        'martor.extensions.del_ins',  # ~~strikethrough~~ and ++underscores++
        'martor.extensions.mdx_video',  # to parse embed/iframe video
    ]

    CREDENTIALS_RECEIVERS_TRAINING_PERIOD = ("mail@localhost", "mail2@localhost")

    MUG_API_CREDENTIALS = {
        'grant_type': 'password',
        'username': 'samsung@apiaccess',  # hardcoded username from MUG
        'password': 'SaMsun9Ace5S',  # hardcoded password from MUG
        'scope': 'SSAPI',  # hardcoded scope XXX TODO Needs to be defined
    }

    MUG_AUTH_API_URL = 'https://myutilitygenius-userauthorisation-test.azurewebsites.net/api/authentication'
    MUG_API_URL = 'https://myutilitygenius-business-home-api-test.azurewebsites.net'
    MUG_ACCESS_TOKEN_LIFETIME = timedelta(days=2)
    MUG_REFRESH_TOKEN_LIFETIME = timedelta(weeks=2)

    # Parameter should be set as False only in localhost, to prevent deleting devices while
    # refreshing devices with dummy SmartThings apps for testing purposes
    DELETE_DEVICES_ON_REFRESH = True

    OFF_PEAKY_POINTS_START_DATE = date(2019, 10, 1)

    DEFAULT_SCHOOLS_TIMEZONE = 'Europe/London'
