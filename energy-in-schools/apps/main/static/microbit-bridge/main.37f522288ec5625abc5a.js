!function(e){function t(t){for(var r,i,c=t[0],s=t[1],u=t[2],f=0,p=[];f<c.length;f++)i=c[f],a[i]&&p.push(a[i][0]),a[i]=0;for(r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r]);for(l&&l(t);p.length;)p.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,c=1;c<n.length;c++){var s=n[c];0!==a[s]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/static/microbit-bridge/";var c=window.webpackJsonp=window.webpackJsonp||[],s=c.push.bind(c);c.push=t,c=c.slice();for(var u=0;u<c.length;u++)t(c[u]);var l=s;o.push([213,1]),n()}({193:function(e,t,n){e.exports=n.p+"microbit_smile.png"},194:function(e,t,n){e.exports=n.p+"microbit_poker.png"},196:function(e,t,n){e.exports=n.p+"connection.gif"},197:function(e,t,n){e.exports=n.p+"flash.gif"},198:function(e,t,n){e.exports=n.p+"flashing.gif"},199:function(e,t,n){e.exports=n.p+"afterFlash.gif"},200:function(e,t,n){e.exports=n.p+"smileFace.gif"},213:function(e,t,n){n(214),e.exports=n(458)},457:function(e,t,n){},458:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(18),i=n(53),c=n(26),s=n.n(c),u=n(191),l="https://energyinschools.co.uk/api/v1";function f(e){var t="["+(new Date).toISOString().slice(11,-5)+"] "+e,n=new CustomEvent("terminalMsg",{detail:{terminalMsg:t}});window.dispatchEvent(n)}function p(e){var t="["+(new Date).toISOString().slice(11,-5)+"] "+e,n=new CustomEvent("historyMsg",{detail:{historyMsg:t}});window.dispatchEvent(n)}var d=function(){return(d=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},h=function(e,t,n,r){return new(n||(n=Promise))(function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function c(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){e.done?a(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(i,c)}s((r=r.apply(e,t||[])).next())})},g=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},b=function(){function e(){var t=this;this.axiosInterceptors={auth:null},s.a.defaults.baseURL=l,s.a.defaults.headers.post["Content-Type"]="application/json",s.a.interceptors.response.use(u.identity,function(n){return h(t,void 0,void 0,function(){return g(this,function(t){return n.response.status===e.NOT_FOUND?(f("request failed: "+n.response.statusText),[2,Promise.reject(n)]):[2,s()(d(d({},n.config),{url:n.config.url.replace(s.a.defaults.baseURL,""),isRetryRequest:!0}))]})})})}return e.ACCESS_TOKEN_PARAM="access",e.NOT_FOUND=404,e}(),E=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),v=function(e,t,n,r){return new(n||(n=Promise))(function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function c(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){e.done?a(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(i,c)}s((r=r.apply(e,t||[])).next())})},m=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},y=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return E(t,e),t.prototype.getWebHubs=function(){return v(this,void 0,void 0,function(){var e;return m(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,s.a.get("/hubs/")];case 1:return[2,t.sent().data.filter(function(e){return"browser"===e.type})];case 2:throw e=t.sent(),new Error(JSON.stringify(e.response.data));case 3:return[2]}})})},t.prototype.getHubFirmware=function(e,t){return v(this,void 0,void 0,function(){var n,r;return m(this,function(a){switch(a.label){case 0:n=["9900","9901"].includes(null===t||void 0===t?void 0:t.slice(0,4))?"v1":"v2",a.label=1;case 1:return a.trys.push([1,3,,4]),[4,s.a.get("/hubs/microbit-firmware/",{params:"-1"!==e?{uid:e}:{microbit_version:n},responseType:"arraybuffer",headers:{Authorization:void 0}})];case 2:return[2,a.sent().data];case 3:throw r=a.sent(),new Error(JSON.stringify(r.response.data));case 4:return[2]}})})},t}(b)),S=n(27),T=n(105),_=n(136),w=T.getLogger("webhub");_.reg(T),_.apply(w),w.setLevel(T.levels.DEBUG);var R,P,C,k,O=w;!function(e){e[e.SUBTYPE_STRING=1]="SUBTYPE_STRING",e[e.SUBTYPE_INT=2]="SUBTYPE_INT",e[e.SUBTYPE_FLOAT=4]="SUBTYPE_FLOAT",e[e.SUBTYPE_EVENT=8]="SUBTYPE_EVENT"}(R||(R={})),function(e){e[e.REQUEST_TYPE_GET_REQUEST=1]="REQUEST_TYPE_GET_REQUEST",e[e.REQUEST_TYPE_POST_REQUEST=2]="REQUEST_TYPE_POST_REQUEST",e[e.REQUEST_TYPE_CLOUD_VARIABLE=4]="REQUEST_TYPE_CLOUD_VARIABLE",e[e.REQUEST_TYPE_BROADCAST=8]="REQUEST_TYPE_BROADCAST",e[e.REQUEST_TYPE_HELLO=16]="REQUEST_TYPE_HELLO"}(P||(P={})),function(e){e[e.REQUEST_STATUS_ACK=32]="REQUEST_STATUS_ACK",e[e.REQUEST_STATUS_ERROR=64]="REQUEST_STATUS_ERROR",e[e.REQUEST_STATUS_OK=128]="REQUEST_STATUS_OK"}(C||(C={})),function(e){e[e.SLIP_END=192]="SLIP_END",e[e.SLIP_ESC=219]="SLIP_ESC",e[e.SLIP_ESC_END=220]="SLIP_ESC_END",e[e.SLIP_ESC_ESC=221]="SLIP_ESC_ESC"}(k||(k={}));var x=function(){function e(e,t,n,r,a){this.app_id=e,this.namespace_id=t,this.uid=n,this.request_type=r,this.payload=[],null!=a&&this.decode(a)}return e.prototype.getAppID=function(){return this.app_id},e.prototype.getNamespaceID=function(){return this.namespace_id},e.prototype.getUID=function(){return this.uid},e.prototype.getReqRes=function(){return this.request_type},e.prototype.getHeader=function(){return S.pack("<BBHB",[this.app_id,this.namespace_id,this.uid,this.request_type])},e.prototype.getPayload=function(){return this.payload},e.prototype.getFormattedPayloadParts=function(){var e=[];function t(e){return Number(e)===e&&e%1==0}function n(e){return Number(e)===e&&e%1!=0}for(var r=0;r<this.payload.length;r++){var a=this.payload[r];switch(typeof a){case"number":t(a)?e.push(S.pack("<Bi",[R.SUBTYPE_INT,a])):n(a)&&e.push(S.pack("<Bf",[R.SUBTYPE_FLOAT,a]));break;case"string":e.push(S.pack("<B"+(a.length+1)+"s",[R.SUBTYPE_STRING,a+"\0"]));break;default:O.warn("FOUND UNIMPLEMENTED SUBTYPE WHILE ENCODING PACKET "+typeof a+" ("+a+")")}}return e},e.prototype.getFormattedPacket=function(){var e=new Uint8Array(this.length());e.set(this.getHeader());var t=this.getHeader().length;this.getFormattedPayloadParts().forEach(function(n){e.set(n,t),t+=n.length});var n=Array.from(e),r=63-n.length;return n=(n=n.concat(new Array(r).fill(0)).slice(0,61)).concat(k.SLIP_END)},e.prototype.length=function(){var e=0;return e+=this.getHeader().length,this.getFormattedPayloadParts().forEach(function(t){e+=t.length}),e},e.prototype.setRequestBit=function(e){this.request_type|=e},e.prototype.clearRequestBit=function(e){this.request_type&=~e},e.prototype.clearAndError=function(e){return this.setRequestBit(C.REQUEST_STATUS_OK),this.clear(),this.append(0),this},e.prototype.append=function(e){this.payload.push(e)},e.prototype.remove=function(e){this.payload=this.payload.slice(0,e).concat(this.payload.slice(e+1))},e.prototype.get=function(e){return this.payload[e]},e.prototype.clear=function(){this.payload=[]},e.prototype.decode=function(e){var t,n;if(0!=e.length){var r,a=0,o=S.unpack("b",e,0),i=e.slice(1);if(o&R.SUBTYPE_STRING){for(var c in r="",i){if("\0"==String.fromCharCode(i[c]))break;r+=String.fromCharCode(i[c])}a=r.length+1}else o&R.SUBTYPE_INT?(r=null===(t=null===S||void 0===S?void 0:S.unpack("<i",i))||void 0===t?void 0:t[0],a=4):o&R.SUBTYPE_FLOAT&&(r=null===(n=null===S||void 0===S?void 0:S.unpack("<f",i))||void 0===n?void 0:n[0],a=4);this.payload.push(r),this.decode(i.slice(a))}},e.dataToSerialPacket=function(t){for(var n,r,a=[],o=0;o<t.length-1;o++)a.push(t.charCodeAt(o));return r=S.unpack("<BBHB",a.slice(0,5)),n=a.slice(5),new e(r[0],r[1],r[2],r[3],n)},e}(),U=n(84);var D=function(){return(D=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},I=function(e,t,n,r){return new(n||(n=Promise))(function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function c(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){e.done?a(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(i,c)}s((r=r.apply(e,t||[])).next())})},N=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},A={0:"city",1:"postcode"},L=function(){function e(e){this.translations=e.translations.json,this.hub_variables=e}return e.prototype.handleRequest=function(e){return I(this,void 0,void 0,function(){return N(this,function(t){switch(t.label){case 0:return e.request_type!==P.REQUEST_TYPE_HELLO?[3,2]:(function(){var e=new Event("helloPackageReceived");window.dispatchEvent(e)}(),[4,this.handleHelloPacket(e)]);case 1:return[2,t.sent()];case 2:return e.getReqRes()&(P.REQUEST_TYPE_GET_REQUEST|P.REQUEST_TYPE_POST_REQUEST)?[4,this.handleRESTRequest(e)]:[3,4];case 3:return[2,t.sent()];case 4:return e.getReqRes()&P.REQUEST_TYPE_CLOUD_VARIABLE?[4,this.handleCloudVariable(e)]:[3,6];case 5:return[2,t.sent()];case 6:return e.getReqRes()&P.REQUEST_TYPE_BROADCAST?[4,this.handleBroadcast(e)]:[3,8];case 7:return[2,t.sent()];case 8:return[2,new Promise(function(t,n){n("Unrecognised packet type ("+e.getReqRes()+")")})]}})})},e.prototype.mapQueryString=function(e,t){var n=t.split("/").filter(function(e){return e}),r=e.split("/").filter(function(e){return e}),a=r[0],o=new RegExp("%(.*)%"),i=[];i.service=a,r.shift(),a=r[0];for(var c=0,s=n;c<s.length;c++){var u=s[c],l=o.exec(u)[1];if("?"==l[l.length-1]){if(""==a)break;l=l.substr(0,l.length-1)}i[l]=a,0!=r.length?(r.shift(),a=r[0]):a=""}return i},e.prototype.processRESTRequest=function(e,t,n,r){try{var a=n[r].microbitQueryString,o=this.mapQueryString(e.get(0),a),i=n[r].baseURL,c=o.endpoint?n[r].endpoint[o.endpoint]:{},s=c.queryObject;null==s&&(s=[]);for(var u=void 0,l=new RegExp("%([^%]*)%","g"),f=i;null!==(u=l.exec(i));){var p=u[1].split("?=");f=p[0]in s?f.replace(u[0],s[p[0]]):p.length>1?f.replace(u[0],p[1]):f.replace(u[0],"")}return O.debug("Service: "+o.service.toUpperCase()),O.debug("Query string map",o),this.translation(o,f,c,t,e,r)}catch(e){return O.error(e),new Promise(function(e,t){t("REST REQUEST ERROR")})}},e.prototype.translation=function(e,t,n,r,a,o){return new Promise(function(a,o){switch(e.service){case"energy":try{var i=e,c=i.location_uid,u=i.period_type,l=i.periods_ago,f=i.type,p="hst"===f?"total":"live",d="hst"===f?{period_type:u+"s",periods_ago:l,unit:"watt_hour"}:{unit:"watt"};s.a.get(t+"/"+p,{params:D(D({},d),{location_uid:c,meter_type:"ELECTRICITY"})}).then(function(e){console.log(e);var t=String(U.apply(n.jspath,e.data)[0]);r.append(t),a(r)}).catch(function(e){console.log("ERROR"+e),o("COULD NOT GET ENERGY USAGE")})}catch(e){console.log(e),o("COULD NOT GET ENERGY USAGE")}break;case"weather":var h=e,g=h.filter,b=h.country,E=A[e.filter_type];s.a.get(t,{params:{filter:g,country:b,filter_type:E}}).then(function(e){var t=String(U.apply(n.jspath,e.data)[0]);r.append(t),a(r)}).catch(function(e){console.log("ERROR"+e),o("COULD NOT GET WEATHER")});break;case"carbon":try{s.a.get(""+t).then(function(t){var o="genmix"==e.endpoint?String(U.apply(n.jspath.replace("%unit%",e.unit),t.data)[0]):String(U.apply(n.jspath,t.data)[0]);r.append(o),a(r)}).catch(function(e){o("COULD NOT GET DATA")})}catch(e){o("COULD NOT GET DATA")}break;default:o("UNKNOWN SERVICE "+e.service)}})},e.prototype.handleRESTRequest=function(e){O.debug("Received REST packet");try{var t=new x(e.getAppID(),e.getNamespaceID(),e.getUID()),n=e.get(0).split("/").filter(function(e){return e}),r=n[0];if(n.shift(),!(r in this.translations))return new Promise(function(e,t){t("INVALID SERVICE ("+r+")")});var a=this.translations[r],o=void 0;if(e.getReqRes()&P.REQUEST_TYPE_GET_REQUEST)o="GET",t.request_type|=P.REQUEST_TYPE_GET_REQUEST;else{if(!(e.getReqRes()&P.REQUEST_TYPE_POST_REQUEST))return new Promise(function(e,t){t("INVALID REQUEST TYPE")});o="POST",t.request_type|=P.REQUEST_TYPE_POST_REQUEST}return this.processRESTRequest(e,t,a,o)}catch(e){return O.error(e),new Promise(function(e,t){t("REST PACKET ERROR")})}},e.prototype.handleCloudVariable=function(e){return new Promise(function(e,t){t("CLOUD UNIMPLEMENTED")})},e.prototype.handleBroadcast=function(e){return new Promise(function(e,t){t("BROADCAST UNIMPLEMENTED")})},e.prototype.handleHelloPacket=function(e){var t=this;return new Promise(function(n,r){O.debug("Received HELLO PACKET"),O.debug("School_ID: "+e.get(1)+" hub_id: "+e.get(2)),p("Received HELLO PACKET"),p("School_ID: "+e.get(1)+" hub_id: "+e.get(2));var a=new x(e.getAppID(),e.getNamespaceID(),e.getUID());e.get(1)?e.get(1)?(t.hub_variables.credentials.school_id=e.get(1),t.hub_variables.credentials.pi_id=e.get(2),a.setRequestBit(P.REQUEST_TYPE_HELLO),a.setRequestBit(C.REQUEST_STATUS_OK),a.append(0),n(a)):r("BAD HUB ID"):r("BAD SCHOOL ID")})},e}(),B=function(e,t,n,r){return new(n||(n=Promise))(function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function c(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){e.done?a(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(i,c)}s((r=r.apply(e,t||[])).next())})},j=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},H=function(){function e(e,t,n){void 0===n&&(n=115200),this.targetDevice=e,this.baud=n,this.hubVariables=t,this.packetCount=0,this.isPaused=!1,this.setupSerialHandler()}return e.prototype.write=function(e){return B(this,void 0,void 0,function(){return j(this,function(t){switch(t.label){case 0:return this.targetDevice.stopSerialRead(),this.pause(),[4,this.sendSerialPacket(e)];case 1:return t.sent(),this.play(),this.targetDevice.startSerialRead(this.hubVariables.serial_delay),[2]}})})},e.prototype.setupSerialHandler=function(){return B(this,void 0,void 0,function(){var e=this;return j(this,function(t){return this.targetDevice.on(i.a.EVENT_SERIAL_DATA,function(t){return B(e,void 0,void 0,function(){var e,n,r,a,o,i,c,s,u;return j(this,function(l){switch(l.label){case 0:if(this.isPaused)return[2];if(-1===t.search(String.fromCharCode(k.SLIP_END))||0!==t.charCodeAt(0))return[2];for(e="",c=0;c<t.length;c++){if((n=t.charCodeAt(c))===k.SLIP_END){e+=String.fromCharCode(n);break}n!==k.SLIP_ESC?e+=String.fromCharCode(n):((r=t.charCodeAt(c+1))===k.SLIP_ESC_END?e+=String.fromCharCode(k.SLIP_END):r===k.SLIP_ESC_ESC?e+=String.fromCharCode(k.SLIP_ESC):(e+=String.fromCharCode(n),e+=String.fromCharCode(r)),c+=1)}this.packetCount++,f("Packet count: "+this.packetCount),O.debug("Packet count: "+this.packetCount),l.label=1;case 1:for(l.trys.push([1,4,,6]),o=new L(this.hubVariables),a=x.dataToSerialPacket(e),O.debug("Input Packet:",e),f("Input Packet: RECEIVED"),i=[],c=0;c<e.length;c++)i.push(e.charCodeAt(c));return O.debug("Serial packet:",a),[4,o.handleRequest(a)];case 2:return(u=l.sent()).setRequestBit(C.REQUEST_STATUS_OK),[4,this.write(u)];case 3:return l.sent(),[3,6];case 4:return s=l.sent(),O.error(s),(u=new x(a.getAppID(),a.getNamespaceID(),a.getUID(),a.getReqRes())).clearAndError("ERROR"),[4,this.write(u)];case 5:return l.sent(),[3,6];case 6:return[2]}})})}),[2]})})},e.prototype.sendSerialPacket=function(e){return B(this,void 0,void 0,function(){var t,n;return j(this,function(r){switch(r.label){case 0:O.debug("Output Packet (raw):",e),t=String.fromCharCode.apply(String,e.getFormattedPacket()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.targetDevice.serialWrite(t)];case 2:return[2,r.sent()];case 3:return n=r.sent(),O.error(n),[3,4];case 4:return[2]}})})},e.prototype.sendSadFace=function(){var e=new x(0,0,0,P.REQUEST_TYPE_HELLO);e.append(-1),this.write(e)},e.prototype.sendHappyFace=function(){var e=new x(0,0,0,P.REQUEST_TYPE_HELLO);e.append(0),this.write(e)},e.prototype.pause=function(){this.isPaused=!0},e.prototype.play=function(){this.isPaused=!1},e}(),Q=n(192),M=n(193),Y=n(194),F=n(8),q=Object(F.a)(function(e){var t;return{image:(t={marginTop:80,width:400},t[e.breakpoints.down("xs")]={width:"100%",marginTop:120},t)}})(function(e){var t=e.classes,n=e.isSmileFace;return a.a.createElement("img",{alt:"",src:n?M:Y,className:t.image})}),G=n(496),V=n(497),z=n(491),K=n(493),W=n(500),J=n(138),$=n.n(J),X=n(137),Z=n.n(X),ee=Object(F.a)(function(e){var t,n,r;return{btn:{position:"fixed",zIndex:100,width:320,top:80,left:0,backgroundColor:"#0177c9",color:"#fff",transition:"all 225ms cubic-bezier(0, 0, 0.2, 1) 0ms;","&:hover":{backgroundColor:"#0177c9"}},right:(t={right:"-176px",paddingLeft:25,justifyContent:"flex-start",borderTopRightRadius:0,borderBottomRightRadius:0,left:"unset","&.open":{borderBottomLeftRadius:0,right:0}},t[e.breakpoints.down("xs")]={right:0,width:144},t),left:(n={left:"-176px",paddingRight:25,justifyContent:"flex-end",borderTopLeftRadius:0,borderBottomLeftRadius:0,right:"unset","&.open":{borderBottomRightRadius:0,left:0}},n[e.breakpoints.down("xs")]={left:0,width:144},n),sidebar:{position:"static !important","& .MuiBackdrop-root":{backgroundColor:"transparent"},"& .MuiPaper-root":(r={width:319.5,height:520,zIndex:99,boxSizing:"border-box",padding:"60px 20px 15px",top:80},r[e.breakpoints.down("xs")]={width:144},r)}}})(function(e){var t=e.direction,n=e.classes,r=e.label,o=e.messages,i=a.a.useState(!1),c=i[0],s=i[1],u=a.a.useRef(null);return a.a.createElement(a.a.Fragment,null,a.a.createElement(z.a,{className:n.btn+" "+("right"===t?n.right:n.left)+" "+(c?"open":"close"),onClick:function(e){return function(){s(e)}}(!c)},"right"===t&&c?a.a.createElement(Z.a,null):a.a.createElement($.a,null),r,"left"===t&&c?a.a.createElement($.a,null):a.a.createElement(Z.a,null)),a.a.createElement(W.a,{ref:u,className:n.sidebar,anchor:t,open:c},o.map(function(e,t){var n=""+t;return a.a.createElement("span",{key:n},o[o.length-1-t],a.a.createElement("br",null))})))}),te=n(492),ne=n(502),re=n(4),ae=n(494),oe=n(495),ie=n(501),ce=n(201),se=n.n(ce),ue=n(139),le=n.n(ue),fe=n(202),pe=n.n(fe),de=n(203),he=n.n(de),ge=n(461),be=n(196),Ee=n.n(be),ve=n(197),me=n.n(ve),ye=n(198),Se=n.n(ye),Te=n(199),_e=n.n(Te),we=n(200),Re=n.n(we),Pe=Object(te.a)(function(e){var t;return Object(ne.a)({tutorialImage:(t={position:"absolute",display:"flex",justifyContent:"center",background:"#fff",zIndex:2e5,width:450,height:316,top:83,left:"calc(50% - 225px)"},t[e.breakpoints.down("xs")]={display:"none"},t),image:{maxWidth:"100%",maxHeight:"100%"}})}),Ce=function(e){var t=e.activeStep,n=Pe({});return a.a.createElement("div",{className:n.tutorialImage},a.a.createElement("img",{className:n.image,src:function(){switch(t){case 0:return Ee.a;case 1:return me.a;case 2:return Se.a;case 3:return _e.a;case 4:return Re.a;default:return!0}}(),alt:""}))},ke=Object(F.a)(function(e){var t;return{alternativeLabel:(t={top:22},t[e.breakpoints.down("xs")]={display:"none"},t),active:{"& $line":{backgroundColor:"#0077c9"}},completed:{"& $line":{backgroundColor:"#0077c9"}},line:{height:3,border:0,backgroundColor:"#eaeaf0",borderRadius:1}}})(ge.a),Oe=Object(te.a)({root:{backgroundColor:"#ccc",zIndex:1,color:"#fff",width:50,height:50,display:"flex",borderRadius:"50%",justifyContent:"center",alignItems:"center"},active:{backgroundColor:"#0077c9",boxShadow:"0 4px 10px 0 rgba(0,0,0,.25)"},completed:{backgroundColor:"#0077c9"}});function xe(e){var t,n=Oe({}),r=e.active,o=e.completed,i={1:a.a.createElement(se.a,null),2:a.a.createElement(le.a,null),3:a.a.createElement(le.a,null),4:a.a.createElement(pe.a,null),5:a.a.createElement(he.a,null)};return a.a.createElement("div",{className:Object(re.a)(n.root,(t={},t[n.active]=r,t[n.completed]=o,t))},i[String(e.icon)])}var Ue=Object(te.a)(function(e){var t,n,r,a;return Object(ne.a)({tutorial:(t={position:"relative",zIndex:101,marginTop:65},t[e.breakpoints.down("xs")]={position:"absolute",top:10},t),overlay:(n={width:"100%",position:"fixed",top:0,bottom:0,left:0,right:0,zIndex:100,backgroundColor:"rgba(255,255,255,0.5)",flexDirection:"column"},n[e.breakpoints.down("xs")]={backgroundColor:"#fff",justifyContent:"center"},n),highlited:(r={zIndex:2e4,pointerEvents:"none"},r[e.breakpoints.down("xs")]={zIndex:1},r),text:{textAlign:"center",marginBottom:50},button:{marginRight:e.spacing(1),backgroundColor:"#0177c9",color:"#fff",transition:"all 225ms cubic-bezier(0, 0, 0.2, 1) 0ms;","&:hover":{backgroundColor:"#0177c9"},"&:disabled":{backgroundColor:"#fff"}},instructions:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},steper:(a={},a[e.breakpoints.down("xs")]={display:"block"},a)})});var De=function(e){var t=e.onTutorialClose,n=Ue({}),o=a.a.useState(0),i=o[0],c=o[1],s=["Connect microbit to your computer","Flash microbit","Wait for flashing","Connect to Microbit","Microbit is ready for usage"];a.a.useEffect(function(){5===i&&t()},[i]);var u=Object(r.useCallback)(function(){c(function(e){return e+1})},[]),l=Object(r.useCallback)(function(){c(function(e){return e-1})},[]);return a.a.createElement(a.a.Fragment,null,a.a.createElement(Ce,{activeStep:i}),a.a.createElement("div",{className:n.tutorial},a.a.createElement("div",null,a.a.createElement("div",{className:n.text},a.a.createElement(K.a,{className:n.instructions},function(e){switch(e){case 0:return"Connect a microbit (v1 or v2) to your computer via USB. If your microbit is already flashed with hub software then you can skip next two steps";case 1:return'Click on Flash button; then select the microbit from the pop up menu and click "Connect"';case 2:return"Wait for flashing to complete. When it`s finished you`ll see an unsmiling face";case 3:return'Click on "Connect" button and select flashed microbit from the pop-up menu and "Connect". Wait until you see a smiley face on your microbit';case 4:return"Microbit is ready for usage as hub";default:return""}}(i)),a.a.createElement("div",null,a.a.createElement(z.a,{disabled:0===i,onClick:l,className:n.button},"Back"),a.a.createElement(z.a,{variant:"contained",color:"primary",onClick:u,className:n.button},i===s.length-1?"Close":"Next")))),a.a.createElement(ae.a,{alternativeLabel:!0,className:n.steper,activeStep:i,connector:a.a.createElement(ke,null)},s.map(function(e){return a.a.createElement(oe.a,{key:e},a.a.createElement(ie.a,{StepIconComponent:xe},e))}))))},Ie=n(204),Ne=n.n(Ie),Ae=n(498),Le=n(205),Be=n.n(Le),je="Connect to a micro:bit to start the hub",He=5,Qe={credentials:{school_id:"",pi_id:""},cloud_variable_socket:{address:"localhost",port:8001},translations:{url:"/static/microbit-bridge/translations.json",poll_updates:!1,poll_time:6e4,json:{}},proxy:{address:"/proxy",proxy_requests:!0},dapjs:{serial_delay:150,baud_rate:115200,flash_timeout:5e3,reset_pause:1e3}},Me=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ye=function(){return(Ye=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},Fe=function(e,t,n,r){return new(n||(n=Promise))(function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function c(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){e.done?a(e.value):function(e){return e instanceof n?e:new n(function(t){t(e)})}(e.value).then(i,c)}s((r=r.apply(e,t||[])).next())})},qe=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(o){return function(c){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}},Ge=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),a=0;for(t=0;t<n;t++)for(var o=arguments[t],i=0,c=o.length;i<c;i++,a++)r[a]=o[i];return r},Ve=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.numberOfConnectionAttempts=0,t.state={selectedHubUID:"-1",terminalMessages:[""],historyMessages:[""],flashing:!1,helloPackageReceived:!1,connected:!1,status:je,tutorial:!1,errorCaught:!1},t.selectDevice=function(){return new Promise(function(e,t){navigator.usb.requestDevice({filters:[{vendorId:3368,productId:516}]}).then(function(t){e(t)}).catch(function(e){t(e)})})},t.onHelloPackageReceived=function(){t.setState(function(e){return Ye(Ye({},e),{helloPackageReceived:!0})})},t.checkConnection=function(){!t.state.helloPackageReceived&&t.numberOfConnectionAttempts<He?(t.targetDevice.setSerialBaudrate(Qe.dapjs.baud_rate),t.numberOfConnectionAttempts++):(t.state.helloPackageReceived||t.setStatus("Package getting error. Please reconnect device and try again"),t.numberOfConnectionAttempts=0,clearInterval(t.interval))},t.disconnect=function(){var e="Couldn't safely disconnect from the micro:bit. This can happen if the micro:bit was unplugged before being disconnected, all is safe!";Qe.school_id="",Qe.pi_id="",t.serialHandler=null,t.serialNumber="";try{t.targetDevice.removeAllListeners(),t.targetDevice.stopSerialRead(),t.targetDevice.disconnect().catch(function(t){console.log(t,e)})}catch(t){console.log(t,e)}t.targetDevice=null,t.setStatus(je),t.setState(function(e){return Ye(Ye({},e),{connected:!1,helloPackageReceived:!1})})},t.connect=function(e){return new Promise(function(n,r){t.targetDevice&&t.targetDevice.stopSerialRead();var a=new i.b(e);t.targetDevice=new i.a(a),t.serialNumber=e.serialNumber,t.targetDevice.disconnect(),t.targetDevice.connect().then(function(){return t.targetDevice.setSerialBaudrate(Qe.dapjs.baud_rate)}).then(function(){return t.targetDevice.getSerialBaudrate()}).then(function(r){t.targetDevice.startSerialRead(Qe.dapjs.serial_delay),t.serialHandler=new H(t.targetDevice,Qe,r),t.setState(function(e){return Ye(Ye({},e),{connected:!0})}),n("Connected to "+(""!==e.productName?e.productName:"micro:bit"))}).catch(function(e){e instanceof DOMException&&19===e.code?r("Failed to connect: Please close any other browser tabs which have been used for micro:bit coding and try again."):r("Failed to connect: "+e)})})},t.flashDevice=function(e){return new Promise(function(n,r){Qe.school_id="",Qe.pi_id="",t.targetDevice&&t.targetDevice.stopSerialRead(),y.getHubFirmware(t.state.selectedHubUID,e.serialNumber).then(function(a){var o=new i.b(e);return t.targetDevice=new i.a(o),t.targetDevice.disconnect(),t.targetDevice.on(i.a.EVENT_PROGRESS,function(e){t.setState(function(e){return Ye(Ye({},e),{flashing:!0})}),t.setStatus("Flashing: "+Math.round(100*e)+"%")}),t.targetDevice.connect().then(function(){return O.info("Flashing"),p("Flashing"),t.targetDevice.flash(a)}).then(function(){return O.info("Finished flashing! Reconnect micro:bit"),p("Finished flashing! Reconnect micro:bit"),n("Finished flashing! Reconnect micro:bit"),t.setState(function(e){return Ye(Ye({},e),{flashing:!1})}),t.targetDevice.disconnect()}).catch(function(e){e instanceof DOMException&&19===e.code?(t.targetDevice.disconnect(),r("Error flashing: Please close any other browser tabs which have been used for micro:bit coding and try again.")):r("Error flashing: "+e),t.setState(function(e){return Ye(Ye({},e),{flashing:!1})}),O.error("Error flashing: "+e)})}).catch(function(){p("Failed to get hub firmware"),r("Failed to get hub firmware")})})},t.connectButtonHandler=function(){t.state.connected?t.disconnect():t.selectDevice().then(function(e){return t.setStatus("Connecting..."),t.connect(e)}).then(function(e){t.interval=window.setInterval(t.checkConnection,2500),t.setStatus(e)}).catch(function(e){"string"==typeof e&&t.setStatus(e)})},t.setStatus=function(e){t.setState(function(t){return Ye(Ye({},t),{status:e})})},t.flashButtonHandler=function(){t.selectDevice().then(function(e){return t.flashDevice(e)}).then(function(e){t.setStatus(e)}).catch(function(e){"string"==typeof e&&t.setStatus(e)})},t.newHistoryMessageHandler=function(e){t.setState(function(t){return Ye(Ye({},t),{historyMessages:Ge(t.historyMessages,[e.detail.historyMsg])})})},t.newTerminalMessageHandler=function(e){t.setState(function(t){return Ye(Ye({},t),{terminalMessages:Ge(t.terminalMessages,[e.detail.terminalMsg])})})},t.closeTutorial=function(){t.setState(function(e){return Ye(Ye({},e),{tutorial:!1})})},t}return Me(t,e),t.prototype.componentDidMount=function(){return Fe(this,void 0,void 0,function(){var e=this;return qe(this,function(t){return this.getTranslations(),navigator.usb.addEventListener("disconnect",function(t){t.device.serialNumber===e.serialNumber&&e.disconnect(),e.setStatus(je)}),window.addEventListener("terminalMsg",this.newTerminalMessageHandler),window.addEventListener("historyMsg",this.newHistoryMessageHandler),window.addEventListener("helloPackageReceived",this.onHelloPackageReceived),[2]})})},t.prototype.componentWillUnmount=function(){window.removeEventListener("terminalMsg",this.newTerminalMessageHandler),window.removeEventListener("historyMsg",this.newHistoryMessageHandler),window.removeEventListener("helloPackageReceived",this.onHelloPackageReceived)},t.prototype.getTranslations=function(){return Fe(this,void 0,void 0,function(){return qe(this,function(e){return Qe.translations.poll_updates||0===Object.entries(Qe.translations.json).length?(f("Checking for translations updates"),O.info("Checking for translations updates"),Q.ajax({url:Qe.translations.url,method:"GET",dataType:"JSON",cache:!1,timeout:1e4,error:function(e){f("Error receiving translations"),O.error(e)},success:function(e){Qe.translations.json!=={}&&e.version===Qe.translations.json.version||(f("Translations have updated! (v"+e.version+")"),Qe.translations.json=e)}}),setTimeout(this.getTranslations,Qe.translations.poll_time),[2]):[2]})})},t.prototype.render=function(){var e=this,t=this.props.classes;return a.a.createElement("div",{id:"main"},a.a.createElement(G.a,{maxWidth:"xl"},a.a.createElement(V.a,{container:!0,direction:"column",justifyContent:"center",alignItems:"center"},a.a.createElement(V.a,{item:!0,xs:12,className:t.controls},a.a.createElement(q,{isSmileFace:this.state.helloPackageReceived}),a.a.createElement(K.a,{variant:"h5",component:"span",gutterBottom:!0,className:t.status},this.state.status,a.a.createElement(Ae.a,{className:Object(re.a)(t.tutorialBtn,{open:this.state.tutorial}),onClick:function(){return e.setState(function(e){return Ye(Ye({},e),{tutorial:!e.tutorial})})}},this.state.tutorial?a.a.createElement(Be.a,null):a.a.createElement(Ne.a,null))),a.a.createElement("div",{id:"additionalInfo"}),a.a.createElement("div",{className:t.buttonContainer},a.a.createElement(z.a,{id:"connect-button",className:t.btn,variant:"outlined",onClick:this.connectButtonHandler,disabled:this.state.flashing},this.state.connected?"Disconnect":"Connect"),a.a.createElement(z.a,{id:"flash-button",className:t.btn+" "+t.btnFlash,variant:"outlined",onClick:this.flashButtonHandler,disabled:this.state.flashing},"Flash")))),a.a.createElement(ee,{messages:this.state.historyMessages,label:"history",direction:"right"}),a.a.createElement(ee,{messages:this.state.terminalMessages,label:"terminal",direction:"left"}),this.state.tutorial&&a.a.createElement(De,{onTutorialClose:this.closeTutorial})))},t}(r.Component),ze=Object(F.a)(function(e){var t,n,r,a;return{controls:{display:"flex",flexDirection:"column",alignItems:"center"},buttonContainer:(t={},t[e.breakpoints.down("xs")]={width:"100%",display:"flex",flexDirection:"column",alignItems:"center"},t),btn:(n={color:"#0177c9",border:"1px solid #0177c9",width:138,height:50,borderRadius:8},n[e.breakpoints.down("xs")]={marginBottom:10,width:"100%"},n["&:hover"]={backgroundColor:"#0177c9",color:"#fff"},n),tutorialBtn:{position:"relative",color:"#0177c9",zIndex:102,"&.open":(r={},r[e.breakpoints.down("xs")]={position:"fixed",top:0,right:20},r)},btnFlash:(a={margin:10},a[e.breakpoints.down("xs")]={marginTop:0},a),status:{textAlign:"center"}}})(Ve),Ke=n(206),We=n(499),Je=Object(Ke.a)({typography:{fontFamily:['"SamsungFont"',"Roboto",'"Helvetica Neue"',"Arial","sans-serif"].join(",")}}),$e=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(We.a,{theme:Je},a.a.createElement(ze,null)))};n(456);n(457);Object(o.render)(a.a.createElement(function(){return r.createElement($e,null)},null),document.getElementById("app"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,