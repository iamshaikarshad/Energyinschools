import { isNil } from 'lodash';

import carbonLow from '../../../../images/carbon_low.svg';
import carbonMed from '../../../../images/carbon_medium.svg';
import carbonHigh from '../../../../images/carbon_high.svg';

import backgroundLow from '../../../../images/low_carbon_background.svg';
import backgroundMed from '../../../../images/med_carbon_background.svg';
import backgroundHigh from '../../../../images/high_carbon_background.svg';

import plantCarbonLow from '../../../../images/plant_carbon_low.svg';
import plantCarbonMed from '../../../../images/plant_carbon_med.svg';
import plantCarbonHigh from '../../../../images/plant_carbon_high.svg';

import orangeLikeIcon from '../../../../images/like_orange.png';
import orangeDislikeIcon from '../../../../images/dislike_orange.png';

import blueLikeIcon from '../../../../images/like_blue.png';
import blueDislikeIcon from '../../../../images/dislike_blue.png';

const CARBON_INTENSITY_MAPPING = Object.freeze({
  190: {
    background: backgroundLow,
    image: carbonLow,
    color: 'rgb(0, 188, 212)',
    text: 'Carbon intensity is low!',
    plant: plantCarbonLow,
  },
  210: {
    background: backgroundMed,
    image: carbonMed,
    color: 'rgb(243, 143, 49)',
    text: 'Carbon intensity is middle!',
    plant: plantCarbonMed,
  },
  240: {
    background: backgroundHigh,
    image: carbonHigh,
    color: 'rgb(77, 130, 137)',
    text: 'Carbon intensity is high!',
    plant: plantCarbonHigh,
  },
});

const DIRTY_GENERATION_MAPPING = Object.freeze({
  default: {
    text: '',
    icon: '',
  },
  low: {
    text: 'This is low!',
    icon: blueLikeIcon,
  },
  average: {
    text: 'This is average!',
    icon: '',
  },
  high: {
    text: 'This is high!',
    icon: blueDislikeIcon,
  },
  veryHigh: {
    text: 'This is very high!',
    icon: blueDislikeIcon,
  },
});

const GREEN_ENERGY_MAPPING = Object.freeze({
  default: {
    text: '',
    icon: '',
  },
  low: {
    text: 'This is low!',
    icon: orangeDislikeIcon,
  },
  average: {
    text: 'This is average!',
    icon: '',
  },
  high: {
    text: 'This is high!',
    icon: orangeLikeIcon,
  },
  veryHigh: {
    text: 'This is very high',
    icon: orangeLikeIcon,
  },
});

export const DEFAULT_CARBON_SCREEN_PREVIEW_MESSAGES = [
  'At sunny and windy times less carbon is used to generate the electricity you are using',
  'Green energy is generated by solar, wind and biomass',
  'Dirty energy is generated by Coal, gas and oil',
  'Nuclear energy has not included; do you think that nuclear is clean or dirty energy?',
];

const getClosestThreshold = (value, mapObj) => (
  Object.keys(mapObj).reduce((prev, curr) => (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev))
);

/*
  Get images and background for current carbon intensity

  *value current carbon intensity

  *type 'image' or 'background'
*/
export const getCarbonIntensityCharacter = (value, type) => {
  const closestThreshold = getClosestThreshold(value, CARBON_INTENSITY_MAPPING);

  if (['image', 'background', 'color', 'text', 'plant'].includes(type)) {
    return CARBON_INTENSITY_MAPPING[closestThreshold][type]; // return value as default
  }
  return CARBON_INTENSITY_MAPPING[closestThreshold].image;
};

export const getDirtyGenerationCharacter = (value) => {
  if (isNil(value)) return DIRTY_GENERATION_MAPPING.default;
  let threshold;
  switch (true) {
    case value <= 20:
      threshold = 'low';
      break;
    case value > 20 && value <= 40:
      threshold = 'average';
      break;
    case value > 40 && value <= 50:
      threshold = 'high';
      break;
    case value > 50:
      threshold = 'veryHigh';
      break;
    default:
      threshold = 'default';
      break;
  }
  const data = DIRTY_GENERATION_MAPPING[threshold];
  return data || DIRTY_GENERATION_MAPPING.default;
};

export const getGreenEnergyCharacter = (value) => {
  if (isNil(value)) return GREEN_ENERGY_MAPPING.default;
  let threshold = 'default';
  switch (true) {
    case value <= 10:
      threshold = 'low';
      break;
    case value > 10 && value <= 20:
      threshold = 'average';
      break;
    case value > 20 && value <= 30:
      threshold = 'high';
      break;
    case value > 30:
      threshold = 'veryHigh';
      break;
    default:
      threshold = 'default';
      break;
  }
  const data = GREEN_ENERGY_MAPPING[threshold];
  return data || GREEN_ENERGY_MAPPING.default;
};
